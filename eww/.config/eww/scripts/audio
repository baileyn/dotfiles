#!/usr/bin/env python

import json
import subprocess


def parse(line):
    try:
        idx_start = line.index(':')
        typ = line[:idx_start]

        idx_start = line.index(':', idx_start+1)
        idx_end = line.index(',', idx_start+1)
        id_name = line[idx_start+1:idx_end].strip()

        idx_start = line.index(':', idx_start+1)
        idx_end = line.index(',', idx_start+1)
        name = line[idx_start+1:idx_end].strip()

        idx_start = line.index(':', idx_start+1)
        idx_end = line.index(',', idx_start+1)
        mute = line[idx_start+1:idx_end].strip()

        idx_start = line.index(':', idx_start+1)
        idx_end = line.index(',', idx_start+1)

        idx_start = line.index('Volumes:') + 8
        idx_end = line.index(']', idx_start+1)
        volumes = eval(line[idx_start+1:idx_end+1].strip())
        volumes = [int(e[:-1]) for e in volumes]

        return {
            "type": typ,
            "id": id_name,
            "name": name,
            "muted": mute != "0",
            "volumes": volumes,
            "default": 'Default' in line,
        }
    except ValueError:
        return None


def get_information():
    res = subprocess.run(['pulsemixer', '-l'], stdout=subprocess.PIPE)

    info = []

    for line in res.stdout.decode('utf-8').splitlines():
        info.append(parse(line))

    return info


def get_icon(device) -> str:
    if device['muted']:
        return 'images/volume_mute.png'

    volume = device['volumes'][0]

    if volume == 0:
        return 'images/volume_off.png'
    if volume < 50:
        return 'images/volume_low.png'

    return 'images/volume_high.png'


if __name__ == '__main__':
    info = get_information()

    data = {}
    info = get_information()
    data['defaults'] = {}
    data['sinks'] = []
    data['sources'] = []

    for item in info:
        if item['default']:
            typ = item['type'].lower()
            data['defaults'][typ] = item

        if item['type'] == 'Sink':
            data['sinks'].append(item)
        elif item['type'] == 'Source':
            data['sources'].append(item)

    data['icon'] = get_icon(data['defaults']['sink'])

    print(json.dumps(data), end="")
